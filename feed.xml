<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>大伟的博客</title>
    <description>分享工作,学习,生活点滴。互联网鲜肉一枚。
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 28 May 2017 11:49:07 +0800</pubDate>
    <lastBuildDate>Sun, 28 May 2017 11:49:07 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>专利</title>
        <description>&lt;p&gt;我的专利发表了《基于mac地址的坐席端口安全管理方法》&lt;/p&gt;

&lt;p&gt;该专利描述了如何通过自动化的系统采集，数据建模，流程闭环建立了办公坐席端口安全管理机制。&lt;/p&gt;

&lt;p&gt;原理基于 关闭7天内未出现mac的交换机端口。&lt;/p&gt;

&lt;p&gt;期待下一篇专利～～。&lt;/p&gt;
</description>
        <pubDate>Sun, 28 May 2017 10:00:14 +0800</pubDate>
        <link>http://yourdomain.com/work/2017/05/28/%E4%B8%93%E5%88%A9.html</link>
        <guid isPermaLink="true">http://yourdomain.com/work/2017/05/28/%E4%B8%93%E5%88%A9.html</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>open-falcon监控系统</title>
        <description>&lt;p&gt;最近比较关注互联网企业监控系统这块。&lt;/p&gt;

&lt;p&gt;传统的有all in one的开源zabbix系统，但是服务器上了规模之后，zabbix就会出现瓶颈。&lt;/p&gt;

&lt;p&gt;不得不采用拆分多套zabbix的方法来解决水平扩展的问题。主要瓶颈问题在于zabbix后端采用了mysql来存监控值。&lt;/p&gt;

&lt;p&gt;于是许多大型的互联网企业都是采用自研系统的办法来解决问题。&lt;/p&gt;

&lt;p&gt;比较好用的有小米开源的 open-falcon 监控系统，还有我司的 hickwall 等等。&lt;/p&gt;

&lt;p&gt;open-falcon后端存储基于RRD， hickwall采用ES集群的方式。&lt;/p&gt;

&lt;p&gt;接下来主要来介绍下open-falcon系统。&lt;/p&gt;

&lt;p&gt;文档  &lt;a href=&quot;https://book.open-falcon.org/zh/index.html&quot;&gt;https://book.open-falcon.org/zh/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;代码  &lt;a href=&quot;https://github.com/open-falcon&quot;&gt;https://github.com/open-falcon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;视频教程 &lt;a href=&quot;http://www.jikexueyuan.com/course/1651.html&quot;&gt;http://www.jikexueyuan.com/course/1651.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Feb 2017 22:00:14 +0800</pubDate>
        <link>http://yourdomain.com/work/2017/02/19/open-falcon%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F.html</link>
        <guid isPermaLink="true">http://yourdomain.com/work/2017/02/19/open-falcon%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F.html</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>三周年</title>
        <description>&lt;p&gt;DEAR 毛咏伟，&lt;/p&gt;

&lt;p&gt;还记得选择携程最初的理由吗？&lt;/p&gt;

&lt;p&gt;年轻、纯真而饱含激情，相信你一直拥有着。&lt;/p&gt;

&lt;p&gt;今天，是你和携程的周年纪念日，&lt;/p&gt;

&lt;p&gt;又是一年，&lt;/p&gt;

&lt;p&gt;你可能涨姿势了，涨米了，长肉了……&lt;/p&gt;

&lt;p&gt;是携程，&lt;/p&gt;

&lt;p&gt;见证了你的每一次牛逼，&lt;/p&gt;

&lt;p&gt;容纳了你的每一次嚣张，&lt;/p&gt;

&lt;p&gt;目睹了你的每一次精彩，&lt;/p&gt;

&lt;p&gt;颤动了你的每一次心跳&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;让我们继续保有创业的野心与拼搏的冲劲，&lt;/p&gt;

&lt;p&gt;永远”不知好歹”，永远热泪盈眶！&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Dec 2016 10:00:14 +0800</pubDate>
        <link>http://yourdomain.com/work/2016/12/10/%E4%B8%89%E5%91%A8%E5%B9%B4.html</link>
        <guid isPermaLink="true">http://yourdomain.com/work/2016/12/10/%E4%B8%89%E5%91%A8%E5%B9%B4.html</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>netflow网络流量分析实践</title>
        <description>&lt;p&gt;本期分享的内容是关于网络运维可视化中最重要的一环，即网络流量分析与展现。阐述如何使用自研工具替换昂贵的商用产品，并在生产系统成功应用的简要历程。因此这里会对技术做简要说明，希望能够给大家带来启发。&lt;/p&gt;

&lt;p&gt;一、背景&lt;/p&gt;

&lt;p&gt;随着互联网的发展，应用种类越来越多，造成网络流量越来越大，流量成分越来越复杂。当网络出现延时，丢包等情况，急需通过流量分析的手段来定位故障。于是业界产生了思科netflow为主的流量分析协议，类似的协议的还有sflow,cflow,netstream等等，与传统基于SNMP、网络探针、实时抓包分析方法不同，它利用Flow技术来收集网络中有关流量的重要信息，用于监视网络活动，帮助用户了解流量构成、协议分布和用户活动，回答谁(Who)在什么时间(When)、什么地方(Where)、执行什么行为(What)等最关心的问题。&lt;/p&gt;

&lt;p&gt;公司之前使用商用的解决方案，成本较高。由于网络运维规模的日益增大，出于网络可视化的运维需求以及成本考虑，我们设计并自研基于netflow的流量分析工具。NetFlow最初是由Cisco开发的，由于使用广泛，目前很多厂家都可以实现，如：Juniper、Extreme、Foundry、H3C等。Cisco的NetFlow也有多种版本，如V5、V7、V8、V9。目前NetFlow V9是主流。因此本文主要针对NetFlow V9，&lt;/p&gt;

&lt;p&gt;该版本数据包中的基本元素包含哪些内容呢?首先从Flow讲起，一个IP数据包的Flow至少定义了下面7个关键元素：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Ø 源IP地址;

Ø 目的IP地址;

Ø 源端口号;

Ø 目的端口号;

Ø 第三层协议的类型;

Ø TOS字段;

Ø 网络设备输入/输出的逻辑端口(if index)

以上7个字段定义了一个基本的Flow信息。 Netflow就是利用分析IP数据包的上述7种属性，快速区分网络中传送的各种类型的业务数据流。

1. Cache管理
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在NetFlow中有两个关键组件：&lt;/p&gt;

&lt;p&gt;(1) NetFlow Cache，主要描述流缓存(或者说源数据)如何存放在Cache中。&lt;/p&gt;

&lt;p&gt;NetFlow缓存管理机制中包含一系列高度精细化算法，能够有效地判断一个报文是属于已存在Flow的一部分还是应该在缓存中产生一条新的Flow。这些算法也能动态更新缓存中Flow的信息，并且判断哪些Flow应该到期终止。&lt;/p&gt;

&lt;p&gt;(2) NetFlow Export，数据流的输出机制，主要描述了数据流是如何输出并被分析器接收的。首先了解NetFlow Cache(缓存机制)。当缓存中的Flow到期后，就产生一个将Flow输出的动作。将超时的Flow信息以数据报文的方式输出，叫做“NetFlow Export”，这些输出的报文包含30条以上的Flow信息。这些NetFlow信息一般是无法识别的，需由专用收集器(Flow Collector)采集到并做出进一步分析，这些Flow Collector能够识别NetFlow的特殊格式。&lt;/p&gt;

&lt;p&gt;2.输出格式&lt;/p&gt;

&lt;p&gt;NetFlow的输出报文包含报头和一系列的Flow流，报头包含系列号、记录数、系统时间等，Flow流包含具体内容，如IP地址、端口、路由信息等。各个版本的NetFlow格式都相同，且NetFlow采用UDP报文，这更有利于大流量情况下的数据报文传输。换句话说，在路由器，防火墙等网络设备中如要使用NetFlow就不能禁用UDP端口，否则无法接收设备传递的信息。&lt;/p&gt;

&lt;p&gt;3.抽样机制&lt;/p&gt;

&lt;p&gt;在Netflow的实际应用中，它不是时刻都把数据包抓取过来，而是采用抽样的机制，通过使用抽样技术可以降低路由器的CPU利用率，减少Flow的输出量，但仍然可以监测到大多数的流量信息。当我们不需要了解网络流量的每个Flow的具体细节的时候，抽样就成了比较好的选择。但流量计费系统采用NetFlow会造成误差，使得NetFlow输出有时不能准确反映流量的实际情况。这时如果你的流量计费系统选用Netflow就不太合适了。&lt;/p&gt;

&lt;p&gt;4.性能影响&lt;/p&gt;

&lt;p&gt;使用任何一种技术作为工程师最应该关注它的性能问题。由于在设备缓存中Flow的生成，需要消耗系统资源同样，将Flow格式化成特定的输出报文并将报文输出，也是要消耗系统资源，因此在设备上使用NetFlow时，肯定就会影响设备性能。由于高端Cisco设备(如6500、7600系列等)都是通过ASIC硬件处理数据包，所以占用10%～20%利用率均属正常。注意，在使用中CPU的利用率会随着缓存中Flow条目的增大而增加，所以在高负载情况下，一定要慎用Netflow功能。&lt;/p&gt;

&lt;p&gt;二、系统构架&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://davidsome.github.io/img/netflow.png&quot; alt=&quot;netflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本系统分为如下几大模块。&lt;/p&gt;

&lt;p&gt;收集模块：使用golang实现的收集器，基于socket udp网络通信，将收集的flow包解析，获取需要的流字段和值，进行数据加工成JSON数据，送入消息队列kafka。可以绑定多个UDP端口进行多进程的收集，保证最快的收集性能。收集器可以分布式部署，灵活可扩展。&lt;/p&gt;

&lt;p&gt;聚合模块：从kafka消息队列里实时接收并聚合数据，可以按多维度聚合，时间上按天聚合，按小时聚合数据，内容上按7个flow的关键元素聚合完再送入kafka消息队列。&lt;/p&gt;

&lt;p&gt;存储模块：后端存储使用ES，使用&lt;a href=&quot;https://github.com/childe/hangout&quot;&gt;hangout&lt;/a&gt;工具从kafka消息队列消费flow数据进ES。&lt;/p&gt;

&lt;p&gt;分析模块：自制web页面展示图表，报表功能。用户在界面上发起请求，实时向ES集群发起请求，ES分析数据，聚合并展现各个维度的分析结果给用户。&lt;/p&gt;

&lt;p&gt;三、系统主要实现的功能&lt;/p&gt;

&lt;p&gt;（1）流量监控和分析，通过高速引擎对所接收的流数据进行解析，生成各种有用的图表，以满足带宽监视和流量分析的目的。&lt;/p&gt;

&lt;p&gt;（2）容量规划，通过分析网络流量及带宽的使用趋势，为制定网络带宽容量规划提供数据支撑。&lt;/p&gt;

&lt;p&gt;（3）支持主流设备和Flow协议分析，支持所有主流厂商的网络设备以及防火墙设备，能够解析NetFlow、sFlow、NetStream等协议。&lt;/p&gt;

&lt;p&gt;四、总结&lt;/p&gt;

&lt;p&gt;通过该工具，能够第一时间帮助定位故障，实现网络流量可视化。未来，我们希望能够接入更多设备，增加告警功能。增加更多维度，在使用上更加人性化。&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Dec 2016 10:00:14 +0800</pubDate>
        <link>http://yourdomain.com/work/2016/12/03/netflow%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%AE%9E%E8%B7%B5.html</link>
        <guid isPermaLink="true">http://yourdomain.com/work/2016/12/03/netflow%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%AE%9E%E8%B7%B5.html</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>荣誉墙</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;人生有喜有忧，要不断的改善自我，成就新的高度。&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://davidsome.github.io/img/image1.JPG&quot; alt=&quot;tech1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://davidsome.github.io/img/image2.JPG&quot; alt=&quot;tech2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;敬请期待，从未止步。&lt;/h3&gt;
</description>
        <pubDate>Sat, 19 Nov 2016 10:16:14 +0800</pubDate>
        <link>http://yourdomain.com/work/2016/11/19/%E8%8D%A3%E8%AA%89%E5%A2%99.html</link>
        <guid isPermaLink="true">http://yourdomain.com/work/2016/11/19/%E8%8D%A3%E8%AA%89%E5%A2%99.html</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>拍牌</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;说多了都是泪啊&lt;/h3&gt;

&lt;h3 id=&quot;section-1&quot;&gt;第一次 第二次 第三次 第四次 第五次 第六次&lt;/h3&gt;

&lt;h3 id=&quot;section-2&quot;&gt;都跪了！！！！&lt;/h3&gt;

&lt;h3 id=&quot;section-3&quot;&gt;好的，接下来我要喝喝鸡汤了&lt;/h3&gt;

&lt;p&gt;(1)每一天，不约而至，就是一种心情。每个人，擦肩而过，就是一次缘分。每条路，寒来暑往，就是一道风景。守住心底那最美的风景，&lt;/p&gt;

&lt;p&gt;成为一种分度，宁静而致远；守住记忆里最美风景，成为一种境界，悠然而豁达。守住生命中最美风景，成为一种睿智，淡定而从容。&lt;/p&gt;

&lt;p&gt;美好一天从”风景”开始 ！&lt;/p&gt;

&lt;p&gt;(2)学会自己欣赏自己，每天送个大大的微笑给自己。累与不累，很多时候取决于心态，过你的日子，别去想你过了的日子。人生，总会有&lt;/p&gt;

&lt;p&gt;不期而遇的温暖，和生生不息的希望。&lt;/p&gt;

&lt;p&gt;美好一天从”欣赏自己”开始！&lt;/p&gt;

&lt;p&gt;(3)实际上，生活不会给我们打草稿的时间和机会，每一笔下去都无法再涂改，我们每天写下的”草稿”，都会成为人生无法更改的答案。&lt;/p&gt;

&lt;p&gt;美好一天从”无悔”开始！&lt;/p&gt;

&lt;p&gt;(4)要有一颗安闲自在的心，一切随缘，顺气自然，不怨怒，不燥进，不过度，不强求，不悲观，不刻板，不慌乱，不忘形，不以物喜，不以己悲。&lt;/p&gt;

&lt;p&gt;美好一天从”安闲”开始！&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Nov 2016 10:16:14 +0800</pubDate>
        <link>http://yourdomain.com/life/2016/11/19/%E6%8B%8D%E7%89%8C.html</link>
        <guid isPermaLink="true">http://yourdomain.com/life/2016/11/19/%E6%8B%8D%E7%89%8C.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>ctrip司庆日</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;携程在手,说走就走&lt;/h3&gt;

&lt;p&gt;每年的10月28日是我司的生日,公司都会举办colorful day来庆祝,有各种cosplay,美食等好玩的活动。&lt;/p&gt;

&lt;p&gt;今年我司17岁啦,像James所说的,是一个茁壮成长的青年人啦。&lt;/p&gt;

&lt;p&gt;作为一名携程技术人,我毕业后选择了这里,度过了近第三个年头。&lt;/p&gt;

&lt;p&gt;我司从OTA拼杀纷争到如今的一家独大,无疑创造了一个个奇迹,如BUG般的存在。&lt;/p&gt;

&lt;p&gt;作为一名程里人,我骄傲,我自豪。&lt;/p&gt;

&lt;p&gt;虽然我司的成长并非一帆风顺,但是谁又不是呢?加油,作为一名技术人,我们的愿景就是用技术创新支撑业务的10x增长,&lt;/p&gt;

&lt;p&gt;向中国互联网的第四极目标奋进。&lt;/p&gt;

&lt;p&gt;今天,我衷心地祝福我程生日快乐,并且继续和我司并肩战斗,向更高的目标前进。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://davidsome.github.io/img/ctripbirth.jpg&quot; alt=&quot;ctripbirth&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Oct 2016 10:16:14 +0800</pubDate>
        <link>http://yourdomain.com/work/2016/10/28/ctrip%E5%8F%B8%E5%BA%86%E6%97%A5.html</link>
        <guid isPermaLink="true">http://yourdomain.com/work/2016/10/28/ctrip%E5%8F%B8%E5%BA%86%E6%97%A5.html</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>SRE Google运维解密读后感</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://davidsome.github.io/img/SRE_Google.jpeg&quot; alt=&quot;SRE_Google&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们都知道Google公司的分布式系统设计和实现在业界遥遥领先,这些分布式系统多年前就已经运行在百万台服务器上,
很多公司也都在觊觎这么多服务器是如何运行和管理的。SRE就是运行和管理这百万台服务器和众多分布式系统的关键。&lt;/p&gt;

&lt;p&gt;多年前,Google是通过发布技术论文帮助业界解决分布式难题的,如今各种分布式系统百花齐放,如何管理这些系统对传统的运维技术
和理念产生了极大的挑战。现在Google给我们带来了技术指导和最佳实践。&lt;/p&gt;

&lt;p&gt;SRE是Site Reliability Engineer的简称，从名字可以看出Google的SRE不只是做Operation方面的工作，更多是保障整个Google服务的稳定性。
SRE不接触底层硬件如服务器，这也是高逼格的由来：Google 数据中心的硬件层面的维护工作是交给technician来做的，technician一般不需要有大学学历。&lt;/p&gt;

&lt;p&gt;SRE在Google不负责某个服务的上线、部署，SRE主要是保障服务的可靠性和性能，同时负责数据中心资源分配，为重要服务预留资源。&lt;/p&gt;

&lt;p&gt;Google SRE全球共计约1000人,负责运维Google的全球生产系统。同时,SRE还负责运维幕后那些全球首屈一指的计算基础设施,不管是
全球百万台级别的服务器集群,还是全球一流的网络架构,背后都有SRE的身影。&lt;/p&gt;

&lt;p&gt;SRE是一群天生的怀疑论者,怀疑一切高大上的技术,只看具体的架构设计,实现细节,以及真实的监控图表。SRE在保障系统可靠性方面并没有
什么万能药,有的只是极强的务实态度。这种务实的态度决定了SRE会认真对待运维问题。&lt;/p&gt;

&lt;p&gt;该书主要介绍了以下几点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;拥抱风险&lt;/li&gt;
  &lt;li&gt;服务质量目标SLO&lt;/li&gt;
  &lt;li&gt;减少琐事&lt;/li&gt;
  &lt;li&gt;分布式系统的监控&lt;/li&gt;
  &lt;li&gt;Google自动化系统的演进&lt;/li&gt;
  &lt;li&gt;发布工程&lt;/li&gt;
  &lt;li&gt;简单化&lt;/li&gt;
  &lt;li&gt;基于时间序列数据进行有效报警&lt;/li&gt;
  &lt;li&gt;on-call轮值&lt;/li&gt;
  &lt;li&gt;有效的故障排查手段&lt;/li&gt;
  &lt;li&gt;紧急事件响应&lt;/li&gt;
  &lt;li&gt;紧急事故管理&lt;/li&gt;
  &lt;li&gt;事后总结: 从失败中学习&lt;/li&gt;
  &lt;li&gt;跟踪故障&lt;/li&gt;
  &lt;li&gt;测试可靠性&lt;/li&gt;
  &lt;li&gt;SRE部门中的软件工程实践&lt;/li&gt;
  &lt;li&gt;前端服务器的负载均衡&lt;/li&gt;
  &lt;li&gt;数据中心内部的负载均衡系统&lt;/li&gt;
  &lt;li&gt;应对过载&lt;/li&gt;
  &lt;li&gt;处理连锁故障&lt;/li&gt;
  &lt;li&gt;管理关键状态,利用分布式共识系统来提高可靠性&lt;/li&gt;
  &lt;li&gt;分布式周期性任务系统&lt;/li&gt;
  &lt;li&gt;数据处理流水线&lt;/li&gt;
  &lt;li&gt;数据完整性,读写一致&lt;/li&gt;
  &lt;li&gt;可靠地进行产品的大规模发布&lt;/li&gt;
  &lt;li&gt;处理中断性任务&lt;/li&gt;
  &lt;li&gt;SRE与其他团队的沟通与协作&lt;/li&gt;
  &lt;li&gt;SRE参与模式的演进历程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Google公司面临的问题都是世界级的,所以都是自研系统,结合业务,高效运维。
并且可以看出Google的软件基础架构非常强大,首屈一指。以下是Google的软件基础架构系统。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Borg：分布式任务管理系统&lt;/li&gt;
  &lt;li&gt;Borgmon：强大的监控报警系统&lt;/li&gt;
  &lt;li&gt;BigTable：分布式Key/Value存储系统&lt;/li&gt;
  &lt;li&gt;Google File System：分布式文件系统&lt;/li&gt;
  &lt;li&gt;PubSub：分布式消息队列系统&lt;/li&gt;
  &lt;li&gt;MapReduce：分布式大数据批处理系统&lt;/li&gt;
  &lt;li&gt;F1：分布式数据库&lt;/li&gt;
  &lt;li&gt;ECatcher：日志收集检索系统&lt;/li&gt;
  &lt;li&gt;Stubby：Google的RPC实现&lt;/li&gt;
  &lt;li&gt;Proto Buffer：数据序列化存储协议以及RPC协议&lt;/li&gt;
  &lt;li&gt;Chubby：提供类似Zookeeper的服务&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多精彩内容请看SRE Google运维解密这本书籍吧。&lt;/p&gt;

&lt;p&gt;邮件给我可以借阅哦。&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Oct 2016 10:16:14 +0800</pubDate>
        <link>http://yourdomain.com/work/2016/10/05/SRE-Google%E8%BF%90%E7%BB%B4%E8%A7%A3%E5%AF%86%E8%AF%BB%E5%90%8E%E6%84%9F.html</link>
        <guid isPermaLink="true">http://yourdomain.com/work/2016/10/05/SRE-Google%E8%BF%90%E7%BB%B4%E8%A7%A3%E5%AF%86%E8%AF%BB%E5%90%8E%E6%84%9F.html</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>GOPS全球运维大会</title>
        <description>&lt;p&gt;万众期待的GOPS2016全球运维大会-上海站于2016年9月23-24日在雅乐新天地酒店盛大举行。&lt;/p&gt;

&lt;p&gt;我很有幸作为携程外派的志愿者参与了这项活动,并且获得了SRE google运维解密(签名版)这本书籍。&lt;/p&gt;

&lt;p&gt;我参与了云计算,海量运营,高可用架构这三个分会场和一个主会场开幕的场务工作。&lt;/p&gt;

&lt;p&gt;很有幸结识了 萧帮主,孙宇聪,大梁,kitty庞 等这些业界大牛。&lt;/p&gt;

&lt;p&gt;深受感触。&lt;/p&gt;

&lt;p&gt;重新定义运维, 这是我收获的名词, 运维 和 开发如何更紧密的结合,使得工作效率最大化,使得生产系统运行更加灵活,更加稳定。&lt;/p&gt;

&lt;p&gt;DEVOPS 是我们一直在做的,也许 SRE 是我们努力的方向。50%运维,50%开发,这是新时代的高效运维。&lt;/p&gt;

&lt;p&gt;高效运维工作需要标准化,平台化,服务化,智能化。需要有标准流程,自动化平台,智能监控,云计算,持续交付,信息安全等。&lt;/p&gt;

&lt;p&gt;总之,感谢一起参与活动的小伙伴,感谢大牛的分享,感谢萧帮主的盛会。&lt;/p&gt;

&lt;p&gt;我有幸作为互联网ctrip DEV OPS的一员,今天站在IT运维的风口浪尖,响应时代的召唤,相信我们会做的更出色。&lt;/p&gt;

&lt;p&gt;期待接下里的美国站,北京站能够继续发光发亮~~~&lt;/p&gt;

&lt;p&gt;摘要&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;互联网应用运维框架及能力模型 &lt;a href=&quot;https://github.com/greatops/aops&quot;&gt;https://github.com/greatops/aops&lt;/a&gt; (诶哟不错哟)&lt;/li&gt;
  &lt;li&gt;复旦大学互联网运维在职硕士(什么鬼?)&lt;/li&gt;
  &lt;li&gt;微信公众号-高效运维(感兴趣的速度哦,干货分享~)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 01 Oct 2016 16:16:14 +0800</pubDate>
        <link>http://yourdomain.com/work/2016/10/01/GOPS%E5%85%A8%E7%90%83%E8%BF%90%E7%BB%B4%E5%A4%A7%E4%BC%9A.html</link>
        <guid isPermaLink="true">http://yourdomain.com/work/2016/10/01/GOPS%E5%85%A8%E7%90%83%E8%BF%90%E7%BB%B4%E5%A4%A7%E4%BC%9A.html</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>《凤凰项目：一个运维的传奇故事》读后感</title>
        <description>&lt;p&gt;读完了《凤凰项目：一个运维的传奇故事》。全书以小说方式叙述了一名新上任的运维VP成功解决种种IT问题，顺利完成重要的凤凰项目，帮助业务实现价值，最后公司得到发展，同时也保住了IT不被拆分。&lt;/p&gt;

&lt;h3 id=&quot;it&quot;&gt;IT运维的问题&lt;/h3&gt;
&lt;p&gt;故事的开头，整个IT陷入一片僵局中，运维内部被海量变更需求埋没，更加严重的是他们被各种各样的突发故障所折磨。新上任的比尔如何解决这些问题呢？&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;变更可视化&lt;/h3&gt;
&lt;p&gt;在突发故障这个问题上，以及我自己的认同，一定是由变更引起，或者说是由未被有效管理的变更引起。于是，比尔马上对ITIL change流程做了梳理。这不是流程问题，而是流程／工具与人的实现问题，再好的流程经理如果给不出一套人人爱用的工具，那么一切都是白搭。“本来只需花5min的操作，却要花1小时录入各种字段，那套工具根本不可用”。大道至简，最简单的解决方式是忽略那些细节，管理者要看到的是变更以及变更之间的关系，大家都看得见的变更可以莫名奇妙的让工作快起来，看得见的变更能够让故障的恢复加速200%。而对于一线运维人员，没人愿意被与事情本身无关的工具所束缚。最后的解决方式居然是看板，将运维变更做成了看板，并且依据变更的特性区分不同的颜色，用小便贴纸贴在了强上。平安科技在ITIL上建立了完善的流程，这一点比荒野的主人公所在公司要好多了，感叹大家的执行力，但这里有一个问题，我们并没有让所有的人都看到你有多少变更。比尔用看板的方式，以最简的方式解决了变更可视化的问题。about us，我想这种方式是否适合我们，这是增加了工作量，还是加快了我们的处理速度，是否添加一个看板就行了，还是我们要继续咱们的流程工具呢？原来的流程工具最大的长处是保住变更质量，因为每一个变更步骤都要求变更主管执行，变更被拆分成了很细的粒度，如果将其替换为看板，其结果又会如何呢？&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;资源约束点&lt;/h3&gt;
&lt;p&gt;资源约束点，在所有变更的路径上都会遇到约束点，他可能是人，也可能是一个必须串行处理的节点。在小说中，一名称为布伦特的高级工程师成为了约束点，任何关键人物中他都必不可少，这其中的原因被推测为人性的安全感，他掌握了其他人不知道的配置信息，或者他本身很强大，强大到他的工作其他人无法处理。在运维团队，后者存在的可能性并不高，特别是以技术为导向的团队。除了人意外，不可见的配置管理，不完善的运维对象都将成为约束点，我的团队中就遇到过因为防火墙的拓扑不清晰导致效率缓慢的。如何打破约束点？如何激励团队OPEN/SHARE，打破人性弱点才是关键。 “每解决一个问题，我们知识库的内容就多出一篇文章，而解决此问题的人愈加之多”。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;安全审计&lt;/h3&gt;
&lt;p&gt;书中的大型企业，安全审计部门关注着漏洞、补丁、缺陷，他们会要求运维部门无时无刻的升级、修复，之后造成一波又一波的异常故障。除此之外，安全审计还会购买一些稀奇古怪的东西，这就是他们的KPI，或者说他们必须这么做。还好，书中的安全人员和我遇到或经历的一样，他们也和公司发展大方向，和运维团队战在了一起，他们不再是公司发展的阻碍，但其他公司可不会这样吧？&lt;/p&gt;

&lt;h3 id=&quot;devops&quot;&gt;devops运维自动化&lt;/h3&gt;
&lt;p&gt;在变更可视化、消除资源约束以及打破安全的折磨之后，比尔最后一步是运维自动化，标准化业务逻辑交付过程，通过自动化的方式开放给开发人员，在这里有一本《持续交付》的专著供我们参考。devops是一种文化认同，如同automation infrastructure一样，去年我们花费了大量精力在运维自动化上，但要最终做到完全的一键式流程，应用架构、网络架构需要做相当大的适应性。“每天部署十次不在话下”，我在想其实我们已经做到。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;关于三步工作法&lt;/h3&gt;
&lt;p&gt;三步工作法，如此之简单，标准化，持续优化，将其转变成一种文化，over，如何执行呢？&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;运维的四种工作&lt;/h3&gt;
&lt;p&gt;业务项目、运维项目、突发事件、项目转变的变更。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://davidsome.github.io/img/fenhuangxiangmu.png&quot; alt=&quot;fenhuangxiangmu&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Sep 2016 22:16:14 +0800</pubDate>
        <link>http://yourdomain.com/work/2016/09/14/%E5%87%A4%E5%87%B0%E9%A1%B9%E7%9B%AE-%E4%B8%80%E4%B8%AA%E8%BF%90%E7%BB%B4%E7%9A%84%E4%BC%A0%E5%A5%87%E6%95%85%E4%BA%8B-%E8%AF%BB%E5%90%8E%E6%84%9F.html</link>
        <guid isPermaLink="true">http://yourdomain.com/work/2016/09/14/%E5%87%A4%E5%87%B0%E9%A1%B9%E7%9B%AE-%E4%B8%80%E4%B8%AA%E8%BF%90%E7%BB%B4%E7%9A%84%E4%BC%A0%E5%A5%87%E6%95%85%E4%BA%8B-%E8%AF%BB%E5%90%8E%E6%84%9F.html</guid>
        
        
        <category>work</category>
        
      </item>
    
  </channel>
</rss>
